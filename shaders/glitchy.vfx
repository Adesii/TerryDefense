HEADER
{
    CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
    Description = "Example post processing shader";
}

MODES
{
    Default();
    VrForward();
}

FEATURES
{
}

COMMON
{
    #include "postprocess/shared.hlsl"
}

struct VertexInput
{
    float3 vPositionOs : POSITION < Semantic( PosXyz ); >;
    float2 vTexCoord : TEXCOORD0 < Semantic( LowPrecisionUv ); >;
};

struct PixelInput
{
    float2 vTexCoord : TEXCOORD0;

	// VS only
	#if ( PROGRAM == VFX_PROGRAM_VS )
		float4 vPositionPs		: SV_Position;
	#endif

	// PS only
	#if ( ( PROGRAM == VFX_PROGRAM_PS ) )
		float4 vPositionSs		: SV_ScreenPosition;
	#endif
};

VS
{
    PixelInput MainVs( VertexInput i )
    {
        PixelInput o;
        o.vPositionPs = float4(i.vPositionOs.xyz, 1.0f);
        o.vTexCoord = i.vTexCoord;
        return o;
    }
}

PS
{
    #include "postprocess/common.hlsl"
    #include "common/proceedural.hlsl"

    RenderState( DepthWriteEnable, false );
    RenderState( DepthEnable, false );

    CreateTexture2D( g_tColorBuffer ) < Attribute( "ColorBuffer" );  	SrgbRead( true ); Filter( MIN_MAG_LINEAR_MIP_POINT ); AddressU( MIRROR ); AddressV( MIRROR ); >;
    CreateTexture2D( g_tDepthBuffer ) < Attribute( "DepthBuffer" ); 	SrgbRead( false ); Filter( MIN_MAG_MIP_POINT ); AddressU( CLAMP ); AddressV( CLAMP ); >;

    DynamicCombo( D_ENABLED, 0..1, Sys( PC ) );
    DynamicCombo( D_SCANLINES, 0..1, Sys( PC ) );
    DynamicCombo( D_NOISE, 0..1, Sys( PC ) );
    DynamicCombo( D_CHROMATIC, 0..1, Sys( PC ) );

    float g_fScanLinesIntensity <Default(1.0); >;
    float g_fScanLinesSpeed <Default(1.0); >;
    float g_fScanLinesSize <Default(1.0); >;

    float g_fNoiseIntensity <Default(1.0); >;

    float g_fChromaticAberrationIntensity <Default(1.0); >;

    float g_fBrightness <Default(3.0); >;

    

    struct PixelOutput
    {
        float4 vColor : SV_Target0;
    };
    float mod(float x, float y)
    {
      return x - y * floor(x/y);
    }

    float GetGlitchTime(float time,  float maximum,float mininmum = 0,float smallerthan = 1)
    {
        return sin(mod(g_flTime,time) <=smallerthan ?maximum : mininmum);
    }
    PixelOutput MainPs( PixelInput i )
    {
        PixelOutput o;
        // Get the current screen texture coordinates
        float2 vScreenUv = i.vTexCoord.xy - g_vViewportOffset.xy / g_vRenderTargetSize;

        // Get the current color at a given pixel
        float3 vFrameBufferColor = Tex2D( g_tColorBuffer, vScreenUv.xy ).rgb;
        o.vColor.a = 1.0f;
        o.vColor.rgb = vFrameBufferColor;
        //Chromatic abberation effect
        #if D_ENABLED
            float time = frac(g_flTime);
            #if D_CHROMATIC
                o.vColor.r = Tex2D( g_tColorBuffer, vScreenUv + Simplex2D(vScreenUv.xy*GetGlitchTime(3,time*g_fChromaticAberrationIntensity*10+5))/150).r;
                o.vColor.g = Tex2D( g_tColorBuffer, vScreenUv + Simplex2D(vScreenUv.yx*GetGlitchTime(3.33,time*g_fChromaticAberrationIntensity*15+2.5))/150).g;
                o.vColor.b = Tex2D( g_tColorBuffer, vScreenUv + Simplex2D(vScreenUv.xx*GetGlitchTime(3.66,time*g_fChromaticAberrationIntensity*20+1.5))/150).b;
            #endif
            #if D_SCANLINES
                float3 scanlines = (g_fScanLinesIntensity/1000)*sin((g_fScanLinesSize*2000)*(((vScreenUv.y+(time*(g_fScanLinesSpeed/10)))+Simplex2D(vScreenUv.xy)*GetGlitchTime(4,0.05))/5));
                o.vColor.rgb += scanlines;
            #endif
            #if D_NOISE
                float3 fuzzynoise = FuzzyNoise(vScreenUv.xy/10+(time*0.04))*GetGlitchTime(4,g_fNoiseIntensity/400);
                o.vColor.rgb += fuzzynoise;
            #endif
        #endif


        o.vColor.rgb *= g_fBrightness;


        

        
        
        return o;
    }
}